# Generated by Django 3.2 on 2024-06-02 22:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Mahasiswa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nim', models.CharField(max_length=20, unique=True)),
                ('nama', models.CharField(blank=True, max_length=255, null=True)),
                ('jenis_kelamin', models.CharField(blank=True, max_length=10, null=True)),
                ('tanggal_lahir', models.DateField(blank=True, null=True)),
                ('alamat', models.TextField(blank=True, null=True)),
                ('telepon', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('status_akademik', models.CharField(blank=True, choices=[('Aktif', 'Aktif'), ('Cuti', 'Cuti'), ('Lulus', 'Lulus')], max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataLatih',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ipk', models.DecimalField(decimal_places=2, max_digits=4)),
                ('jumlah_ekstrakurikuler', models.IntegerField()),
                ('lama_ekstrakurikuler', models.IntegerField()),
                ('keaktifan_kegiatan', models.IntegerField()),
                ('pengalaman_kepemimpinan', models.IntegerField()),
                ('prestasi_penghargaan', models.IntegerField()),
                ('class_field', models.CharField(choices=[('Layak', 'Layak'), ('Belum', 'Belum')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='PengumumanWawancara',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tanggal_wawancara', models.DateField()),
                ('isi_wawancara', models.TextField()),
                ('status_aktif', models.CharField(choices=[('Aktif', 'Aktif'), ('Tidak', 'Tidak')], default='Aktif', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='ProgramStudi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kode_program_studi', models.CharField(max_length=10, unique=True)),
                ('nama_program_studi', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kode_semester', models.CharField(max_length=10, unique=True)),
                ('nama_semester', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='HasilWawancara',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nilai_wawancara', models.IntegerField()),
                ('status', models.CharField(choices=[('Lulus', 'Lulus'), ('Tidak Lulus', 'Tidak Lulus')], max_length=12)),
                ('mahasiswa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hasil_wawancara', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CalonAnggota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tanggal_daftar', models.DateField()),
                ('ipk', models.DecimalField(decimal_places=2, max_digits=4)),
                ('bukti_ipk', models.FileField(blank=True, null=True, upload_to='dokumen/ipk/')),
                ('jumlah_ekstrakurikuler', models.IntegerField()),
                ('lama_ekstrakurikuler', models.IntegerField()),
                ('bukti_ekstrakurikuler', models.FileField(blank=True, null=True, upload_to='dokumen/ekstrakurikuler/')),
                ('keaktifan_kegiatan', models.IntegerField()),
                ('bukti_kegiatan_kampus', models.FileField(blank=True, null=True, upload_to='dokumen/kegiatan_kampus/')),
                ('pengalaman_kepemimpinan', models.IntegerField()),
                ('bukti_kepemimpinan', models.FileField(blank=True, null=True, upload_to='dokumen/kepemimpinan/')),
                ('prestasi_penghargaan', models.IntegerField()),
                ('bukti_prestasi_penghargaan', models.FileField(blank=True, null=True, upload_to='dokumen/prestasi_penghargaan/')),
                ('publish_status', models.CharField(choices=[('Ya', 'Ya'), ('Tidak', 'Tidak')], default='Tidak', max_length=5)),
                ('hasil_prediksi', models.CharField(blank=True, max_length=100, null=True)),
                ('mahasiswa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calon_anggota', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='mahasiswa',
            name='program_studi',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mahasiswa_program_studi', to='administrator.programstudi'),
        ),
        migrations.AddField(
            model_name='mahasiswa',
            name='semester',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mahasiswa_semester', to='administrator.semester'),
        ),
        migrations.AddField(
            model_name='mahasiswa',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
